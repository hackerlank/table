//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Skill表格.xlsm SHEET: Sheet1 KEY: skillid + level

#pragma once
#pragma pack(1)
struct SkillDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(skillid, level); }

	WORD level; // 等级
	WORD skillid; // 编号
	char name[32]; // 名称
	DWORD maxlevel; // 最高等级
	BYTE role; // 职业类型
	BYTE shape; // 需求形态
	BYTE type; // 技能类型
	DWORD range; // 攻击距离
	BYTE aimtype; // 目标类型
	BYTE aimchoose; // 目标选择
	BYTE camptype; // 阵营分类
	BYTE usetype; // 释放方式
	BYTE magictype; // 施法类型
	BYTE areatype; // 范围类型
	BYTE dwrange; // 技能范围
	DWORD dwrangeparm; // 技能范围参数
	BYTE aimmax; // 最大数量
	BYTE attacktype; // 技能伤害类型
	BYTE damagetimes; // 伤害次数
	BYTE canstudy; // 能否学习
	DWORD costprestige; // 消耗经验
	DWORD costmoney; // 消耗货币
	DWORD needlevel; // 人物等级
	char costitem[32]; // 消耗道具
	DWORD preskill; // 前提技能
	BYTE preskilllv; // 前提技能等级
	BYTE needbuff; // 技能释放需求BUFF
	DWORD costsp; // 体力消耗
	DWORD costspprob; // 体力消耗百分比
	DWORD coldtime; // 冷却时间
	DWORD sharecoldtime; // 公共冷却
	BYTE sharecoldgroup; // 公共冷却组
	DWORD preptime; // 准备时间
	DWORD guildtime; // 引导时间
	DWORD guilddistime; // 引导间隔时间
	BYTE canbreak; // 是否可打断
	DWORD breakprob; // 打断概率
	DWORD staytime; // 硬直时间
	BYTE canthit; // 是否必中
	DWORD subdefprob; // 忽略对方防御百分比
	BYTE damagetype; // 伤害类型
	DWORD damageprob; // 伤害百分比
	DWORD damagemin; // 最小伤害
	DWORD damagemax; // 最大伤害
	BYTE effectcond; // 效果条件
	DWORD effectid; // 效果ID
	DWORD addbuffprob; // 附加buff概率
	char buff[64]; // BUFF
};
#pragma pack()

#if false
namespace table
{
	// Skill表格
	struct zSkillDataBaseEntry : public zEntry
	{
		WORD level; // 等级
		WORD skillid; // 编号
		char name[32]; // 名称
		DWORD maxlevel; // 最高等级
		BYTE role; // 职业类型
		BYTE shape; // 需求形态
		BYTE type; // 技能类型
		DWORD range; // 攻击距离
		BYTE aimtype; // 目标类型
		BYTE aimchoose; // 目标选择
		BYTE camptype; // 阵营分类
		BYTE usetype; // 释放方式
		BYTE magictype; // 施法类型
		BYTE areatype; // 范围类型
		BYTE dwrange; // 技能范围
		DWORD dwrangeparm; // 技能范围参数
		BYTE aimmax; // 最大数量
		BYTE attacktype; // 技能伤害类型
		BYTE damagetimes; // 伤害次数
		BYTE canstudy; // 能否学习
		DWORD costprestige; // 消耗经验
		DWORD costmoney; // 消耗货币
		DWORD needlevel; // 人物等级
		char costitem[32]; // 消耗道具
		DWORD preskill; // 前提技能
		BYTE preskilllv; // 前提技能等级
		BYTE needbuff; // 技能释放需求BUFF
		DWORD costsp; // 体力消耗
		DWORD costspprob; // 体力消耗百分比
		DWORD coldtime; // 冷却时间
		DWORD sharecoldtime; // 公共冷却
		BYTE sharecoldgroup; // 公共冷却组
		DWORD preptime; // 准备时间
		DWORD guildtime; // 引导时间
		DWORD guilddistime; // 引导间隔时间
		BYTE canbreak; // 是否可打断
		DWORD breakprob; // 打断概率
		DWORD staytime; // 硬直时间
		BYTE canthit; // 是否必中
		DWORD subdefprob; // 忽略对方防御百分比
		BYTE damagetype; // 伤害类型
		DWORD damageprob; // 伤害百分比
		DWORD damagemin; // 最小伤害
		DWORD damagemax; // 最大伤害
		BYTE effectcond; // 效果条件
		DWORD effectid; // 效果ID
		DWORD addbuffprob; // 附加buff概率
		char buff[64]; // BUFF

		virtual const char* getClassName() const { return "Skill表格"; }
		static const char* getFileName() { return "SkillDataBase.tbl"; }
		void fill(const SkillDataBase& base)
		{
			this->id = base.getUniqueID();

			this->level = base.level;
			this->skillid = base.skillid;
			strncpy(this->name, base.name, 32);
			this->maxlevel = base.maxlevel;
			this->role = base.role;
			this->shape = base.shape;
			this->type = base.type;
			this->range = base.range;
			this->aimtype = base.aimtype;
			this->aimchoose = base.aimchoose;
			this->camptype = base.camptype;
			this->usetype = base.usetype;
			this->magictype = base.magictype;
			this->areatype = base.areatype;
			this->dwrange = base.dwrange;
			this->dwrangeparm = base.dwrangeparm;
			this->aimmax = base.aimmax;
			this->attacktype = base.attacktype;
			this->damagetimes = base.damagetimes;
			this->canstudy = base.canstudy;
			this->costprestige = base.costprestige;
			this->costmoney = base.costmoney;
			this->needlevel = base.needlevel;
			strncpy(this->costitem, base.costitem, 32);
			this->preskill = base.preskill;
			this->preskilllv = base.preskilllv;
			this->needbuff = base.needbuff;
			this->costsp = base.costsp;
			this->costspprob = base.costspprob;
			this->coldtime = base.coldtime;
			this->sharecoldtime = base.sharecoldtime;
			this->sharecoldgroup = base.sharecoldgroup;
			this->preptime = base.preptime;
			this->guildtime = base.guildtime;
			this->guilddistime = base.guilddistime;
			this->canbreak = base.canbreak;
			this->breakprob = base.breakprob;
			this->staytime = base.staytime;
			this->canthit = base.canthit;
			this->subdefprob = base.subdefprob;
			this->damagetype = base.damagetype;
			this->damageprob = base.damageprob;
			this->damagemin = base.damagemin;
			this->damagemax = base.damagemax;
			this->effectcond = base.effectcond;
			this->effectid = base.effectid;
			this->addbuffprob = base.addbuffprob;
			strncpy(this->buff, base.buff, 64);
		}
		void reset()
		{
			this->level = 0;
			this->skillid = 0;
			this->name[0] = '\0';
			this->maxlevel = 0;
			this->role = 0;
			this->shape = 0;
			this->type = 0;
			this->range = 0;
			this->aimtype = 0;
			this->aimchoose = 0;
			this->camptype = 0;
			this->usetype = 0;
			this->magictype = 0;
			this->areatype = 0;
			this->dwrange = 0;
			this->dwrangeparm = 0;
			this->aimmax = 0;
			this->attacktype = 0;
			this->damagetimes = 0;
			this->canstudy = 0;
			this->costprestige = 0;
			this->costmoney = 0;
			this->needlevel = 0;
			this->costitem[0] = '\0';
			this->preskill = 0;
			this->preskilllv = 0;
			this->needbuff = 0;
			this->costsp = 0;
			this->costspprob = 0;
			this->coldtime = 0;
			this->sharecoldtime = 0;
			this->sharecoldgroup = 0;
			this->preptime = 0;
			this->guildtime = 0;
			this->guilddistime = 0;
			this->canbreak = 0;
			this->breakprob = 0;
			this->staytime = 0;
			this->canthit = 0;
			this->subdefprob = 0;
			this->damagetype = 0;
			this->damageprob = 0;
			this->damagemin = 0;
			this->damagemax = 0;
			this->effectcond = 0;
			this->effectid = 0;
			this->addbuffprob = 0;
			this->buff[0] = '\0';
		}
	};
	typedef zDataBM<zSkillDataBaseEntry, SkillDataBase> SkillDataBaseManager;
}
#endif

