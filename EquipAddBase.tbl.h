//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Item表格.xlsm SHEET: 装备附加属性 KEY: equip_id

#pragma once
#pragma pack(1)
struct EquipAddBase
{
	DWORD getUniqueID() const { return usage_id_hash(equip_id); }

	DWORD equip_id; // 物品ID
	char holenum_prob[64]; // 洞概率
	char propnum_prob[64]; // 属性个数概率
	char prop_info[1024]; // 属性概率
};
#pragma pack()

#if false
namespace table
{
	// Item表格
	struct zEquipAddBaseEntry : public zEntry
	{
		DWORD equip_id; // 物品ID
		char holenum_prob[64]; // 洞概率
		char propnum_prob[64]; // 属性个数概率
		char prop_info[1024]; // 属性概率

		virtual const char* getClassName() const { return "Item表格"; }
		static const char* getFileName() { return "EquipAddBase.tbl"; }
		void fill(const EquipAddBase& base)
		{
			this->id = base.getUniqueID();

			this->equip_id = base.equip_id;
			strncpy(this->holenum_prob, base.holenum_prob, 64);
			strncpy(this->propnum_prob, base.propnum_prob, 64);
			strncpy(this->prop_info, base.prop_info, 1024);
		}
		void reset()
		{
			this->equip_id = 0;
			this->holenum_prob[0] = '\0';
			this->propnum_prob[0] = '\0';
			this->prop_info[0] = '\0';
		}
	};
	typedef zDataBM<zEquipAddBaseEntry, EquipAddBase> EquipAddBaseManager;
}
#endif

