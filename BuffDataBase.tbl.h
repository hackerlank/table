//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: BUFF表.xlsm SHEET: Sheet1 KEY: buffid + level

#pragma once
#pragma pack(1)
struct BuffDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(buffid, level); }

	WORD level; // 等级
	WORD buffid; // 编号
	char name[64]; // 名称
	BYTE type; // BUFF大类
	BYTE subtype; // BUFF小类
	BYTE buffflag; // 增减益
	BYTE timeaddflag; // 时间叠加
	BYTE removeflag; // 移除类型
	BYTE offlineflag; // 下线继续计时
	BYTE save; // 是否存档
	BYTE noremove; // 死亡不清除
	BYTE send9; // 发送九屏
	BYTE cancel; // 主动取消
	DWORD bufftime; // BUFF时间
	char effectid[64]; // BUFF效果ID
};
#pragma pack()

#if false
namespace table
{
	// BUFF表
	struct zBuffDataBaseEntry : public zEntry
	{
		WORD level; // 等级
		WORD buffid; // 编号
		char name[64]; // 名称
		BYTE type; // BUFF大类
		BYTE subtype; // BUFF小类
		BYTE buffflag; // 增减益
		BYTE timeaddflag; // 时间叠加
		BYTE removeflag; // 移除类型
		BYTE offlineflag; // 下线继续计时
		BYTE save; // 是否存档
		BYTE noremove; // 死亡不清除
		BYTE send9; // 发送九屏
		BYTE cancel; // 主动取消
		DWORD bufftime; // BUFF时间
		char effectid[64]; // BUFF效果ID

		virtual const char* getClassName() const { return "BUFF表"; }
		static const char* getFileName() { return "BuffDataBase.tbl"; }
		void fill(const BuffDataBase& base)
		{
			this->id = base.getUniqueID();

			this->level = base.level;
			this->buffid = base.buffid;
			strncpy(this->name, base.name, 64);
			this->type = base.type;
			this->subtype = base.subtype;
			this->buffflag = base.buffflag;
			this->timeaddflag = base.timeaddflag;
			this->removeflag = base.removeflag;
			this->offlineflag = base.offlineflag;
			this->save = base.save;
			this->noremove = base.noremove;
			this->send9 = base.send9;
			this->cancel = base.cancel;
			this->bufftime = base.bufftime;
			strncpy(this->effectid, base.effectid, 64);
		}
		void reset()
		{
			this->level = 0;
			this->buffid = 0;
			this->name[0] = '\0';
			this->type = 0;
			this->subtype = 0;
			this->buffflag = 0;
			this->timeaddflag = 0;
			this->removeflag = 0;
			this->offlineflag = 0;
			this->save = 0;
			this->noremove = 0;
			this->send9 = 0;
			this->cancel = 0;
			this->bufftime = 0;
			this->effectid[0] = '\0';
		}
	};
	typedef zDataBM<zBuffDataBaseEntry, BuffDataBase> BuffDataBaseManager;
}
#endif

