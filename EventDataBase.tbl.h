//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: 任务活动表.xlsm SHEET: Sheet1 KEY: id

#pragma once
#pragma pack(1)
struct EventDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(id); }

	DWORD id; // 编号
	char name[32]; // 名称
	DWORD type; // 类型
	DWORD forever; // 无限时间
	DWORD wdays; // 每周天
	DWORD begtime; // 开始时间
	DWORD lasttime; // 持续时间
	DWORD relation; // 所属关系
	DWORD remove; // 结束删除
};
#pragma pack()

#if false
namespace table
{
	// 任务活动表
	struct zEventDataBaseEntry : public zEntry
	{
		DWORD id; // 编号
		char name[32]; // 名称
		DWORD type; // 类型
		DWORD forever; // 无限时间
		DWORD wdays; // 每周天
		DWORD begtime; // 开始时间
		DWORD lasttime; // 持续时间
		DWORD relation; // 所属关系
		DWORD remove; // 结束删除

		virtual const char* getClassName() const { return "任务活动表"; }
		static const char* getFileName() { return "EventDataBase.tbl"; }
		void fill(const EventDataBase& base)
		{
			this->id = base.getUniqueID();

			this->id = base.id;
			strncpy(this->name, base.name, 32);
			this->type = base.type;
			this->forever = base.forever;
			this->wdays = base.wdays;
			this->begtime = base.begtime;
			this->lasttime = base.lasttime;
			this->relation = base.relation;
			this->remove = base.remove;
		}
		void reset()
		{
			this->id = 0;
			this->name[0] = '\0';
			this->type = 0;
			this->forever = 0;
			this->wdays = 0;
			this->begtime = 0;
			this->lasttime = 0;
			this->relation = 0;
			this->remove = 0;
		}
	};
	typedef zDataBM<zEventDataBaseEntry, EventDataBase> EventDataBaseManager;
}
#endif

