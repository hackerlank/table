//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Item表格.xlsm SHEET: 道具类 KEY: item_id

#pragma once
#pragma pack(1)
struct ItemDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(item_id); }

	DWORD item_id; // 物品ID
	BYTE base_type; // 道具大类
	BYTE sub_type; // 道具小类
	BYTE use_role; // 使用职业
	DWORD use_level; // 使用等级
	DWORD max_num; // 叠加数量
	DWORD buy_price; // 买入单价
	DWORD sell_price; // 卖出单价
	DWORD own_max; // 拥有数量上限
	BYTE grade; // 物品档次
	BYTE quality; // 品质
	BYTE is_shortcut; // 是否可放入快捷栏
	DWORD bind_mast; // 绑定标识位
	DWORD drop_protecttime; // 掉落权限时间
	DWORD drop_deletetime; // 掉落销毁时间
	BYTE is_armybroad; // 是否拾取同队广播
	BYTE is_allbroad; // 是否拾取全服广播
	BYTE max_highprop; // 每日使用最大次数
	BYTE max_addprop; // 作用函数ID
	DWORD sort_id; // 排序ID
};
#pragma pack()

#if false
namespace table
{
	// Item表格
	struct zItemDataBaseEntry : public zEntry
	{
		DWORD item_id; // 物品ID
		BYTE base_type; // 道具大类
		BYTE sub_type; // 道具小类
		BYTE use_role; // 使用职业
		DWORD use_level; // 使用等级
		DWORD max_num; // 叠加数量
		DWORD buy_price; // 买入单价
		DWORD sell_price; // 卖出单价
		DWORD own_max; // 拥有数量上限
		BYTE grade; // 物品档次
		BYTE quality; // 品质
		BYTE is_shortcut; // 是否可放入快捷栏
		DWORD bind_mast; // 绑定标识位
		DWORD drop_protecttime; // 掉落权限时间
		DWORD drop_deletetime; // 掉落销毁时间
		BYTE is_armybroad; // 是否拾取同队广播
		BYTE is_allbroad; // 是否拾取全服广播
		BYTE max_highprop; // 每日使用最大次数
		BYTE max_addprop; // 作用函数ID
		DWORD sort_id; // 排序ID

		virtual const char* getClassName() const { return "Item表格"; }
		static const char* getFileName() { return "ItemDataBase.tbl"; }
		void fill(const ItemDataBase& base)
		{
			this->id = base.getUniqueID();

			this->item_id = base.item_id;
			this->base_type = base.base_type;
			this->sub_type = base.sub_type;
			this->use_role = base.use_role;
			this->use_level = base.use_level;
			this->max_num = base.max_num;
			this->buy_price = base.buy_price;
			this->sell_price = base.sell_price;
			this->own_max = base.own_max;
			this->grade = base.grade;
			this->quality = base.quality;
			this->is_shortcut = base.is_shortcut;
			this->bind_mast = base.bind_mast;
			this->drop_protecttime = base.drop_protecttime;
			this->drop_deletetime = base.drop_deletetime;
			this->is_armybroad = base.is_armybroad;
			this->is_allbroad = base.is_allbroad;
			this->max_highprop = base.max_highprop;
			this->max_addprop = base.max_addprop;
			this->sort_id = base.sort_id;
		}
		void reset()
		{
			this->item_id = 0;
			this->base_type = 0;
			this->sub_type = 0;
			this->use_role = 0;
			this->use_level = 0;
			this->max_num = 0;
			this->buy_price = 0;
			this->sell_price = 0;
			this->own_max = 0;
			this->grade = 0;
			this->quality = 0;
			this->is_shortcut = 0;
			this->bind_mast = 0;
			this->drop_protecttime = 0;
			this->drop_deletetime = 0;
			this->is_armybroad = 0;
			this->is_allbroad = 0;
			this->max_highprop = 0;
			this->max_addprop = 0;
			this->sort_id = 0;
		}
	};
	typedef zDataBM<zItemDataBaseEntry, ItemDataBase> ItemDataBaseManager;
}
#endif

