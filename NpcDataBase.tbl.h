//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Npc表格.xlsm SHEET: Sheet1 KEY: id

#pragma once
#pragma pack(1)
struct NpcDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(id); }

	DWORD id; // 编号
	char name[32]; // 名称
	DWORD level; // 等级
	DWORD monstertype; // 怪物类型
	DWORD visterange; // 访问距离
	char skills[128]; // 技能
	DWORD npcai; // AI
	DWORD maxhp; // 生命值
	DWORD exp; // 经验值
	DWORD lookrange; // 视野
	DWORD mvspd; // 移动速度
	DWORD rushspd; // 奔跑速度
	DWORD attspd; // 攻击速度
	DWORD blocktype; // 阻挡类型
	DWORD pdef; // 物理防御
	DWORD mdef; // 化学防御
	DWORD pdam; // 物理攻击
	DWORD mdam; // 化学攻击
	DWORD bdam; // 生化攻击
	DWORD hdam; // 热能攻击
	DWORD wdam; // 声波攻击
	DWORD ldam; // 光波攻击
	DWORD bdef; // 生化防御
	DWORD hdef; // 热能防御
	DWORD wdef; // 声波防御
	DWORD ldef; // 光波防御
	DWORD visit; // 是否可访问
	DWORD attack; // 是否可攻击
	DWORD outputmode; // 产出惩罚
	DWORD phit; // 物理命中
	DWORD mhit; // 化学命中
	DWORD force; // 重击几率
	DWORD hide; // 闪避几率
	DWORD ignore; // 忽视几率
	DWORD type; // 类型
	DWORD bonetime; // 死亡特效持续时间
	char randtalk[128]; // 随机说话
	char atttalk[128]; // 攻击说话
	char deadtalk[128]; // 死亡说话
	char targettalk[128]; // 发现目标说话
	DWORD freshdemon; // 刷新奇异兽
	char deathrefresh[128]; // 刷蓝色精英
	DWORD relive; // 不重生
	DWORD modelrange; // 模型半径
};
#pragma pack()

#if false
namespace table
{
	// Npc表格
	struct zNpcDataBaseEntry : public zEntry
	{
		DWORD id; // 编号
		char name[32]; // 名称
		DWORD level; // 等级
		DWORD monstertype; // 怪物类型
		DWORD visterange; // 访问距离
		char skills[128]; // 技能
		DWORD npcai; // AI
		DWORD maxhp; // 生命值
		DWORD exp; // 经验值
		DWORD lookrange; // 视野
		DWORD mvspd; // 移动速度
		DWORD rushspd; // 奔跑速度
		DWORD attspd; // 攻击速度
		DWORD blocktype; // 阻挡类型
		DWORD pdef; // 物理防御
		DWORD mdef; // 化学防御
		DWORD pdam; // 物理攻击
		DWORD mdam; // 化学攻击
		DWORD bdam; // 生化攻击
		DWORD hdam; // 热能攻击
		DWORD wdam; // 声波攻击
		DWORD ldam; // 光波攻击
		DWORD bdef; // 生化防御
		DWORD hdef; // 热能防御
		DWORD wdef; // 声波防御
		DWORD ldef; // 光波防御
		DWORD visit; // 是否可访问
		DWORD attack; // 是否可攻击
		DWORD outputmode; // 产出惩罚
		DWORD phit; // 物理命中
		DWORD mhit; // 化学命中
		DWORD force; // 重击几率
		DWORD hide; // 闪避几率
		DWORD ignore; // 忽视几率
		DWORD type; // 类型
		DWORD bonetime; // 死亡特效持续时间
		char randtalk[128]; // 随机说话
		char atttalk[128]; // 攻击说话
		char deadtalk[128]; // 死亡说话
		char targettalk[128]; // 发现目标说话
		DWORD freshdemon; // 刷新奇异兽
		char deathrefresh[128]; // 刷蓝色精英
		DWORD relive; // 不重生
		DWORD modelrange; // 模型半径

		virtual const char* getClassName() const { return "Npc表格"; }
		static const char* getFileName() { return "NpcDataBase.tbl"; }
		void fill(const NpcDataBase& base)
		{
			this->id = base.getUniqueID();

			this->id = base.id;
			strncpy(this->name, base.name, 32);
			this->level = base.level;
			this->monstertype = base.monstertype;
			this->visterange = base.visterange;
			strncpy(this->skills, base.skills, 128);
			this->npcai = base.npcai;
			this->maxhp = base.maxhp;
			this->exp = base.exp;
			this->lookrange = base.lookrange;
			this->mvspd = base.mvspd;
			this->rushspd = base.rushspd;
			this->attspd = base.attspd;
			this->blocktype = base.blocktype;
			this->pdef = base.pdef;
			this->mdef = base.mdef;
			this->pdam = base.pdam;
			this->mdam = base.mdam;
			this->bdam = base.bdam;
			this->hdam = base.hdam;
			this->wdam = base.wdam;
			this->ldam = base.ldam;
			this->bdef = base.bdef;
			this->hdef = base.hdef;
			this->wdef = base.wdef;
			this->ldef = base.ldef;
			this->visit = base.visit;
			this->attack = base.attack;
			this->outputmode = base.outputmode;
			this->phit = base.phit;
			this->mhit = base.mhit;
			this->force = base.force;
			this->hide = base.hide;
			this->ignore = base.ignore;
			this->type = base.type;
			this->bonetime = base.bonetime;
			strncpy(this->randtalk, base.randtalk, 128);
			strncpy(this->atttalk, base.atttalk, 128);
			strncpy(this->deadtalk, base.deadtalk, 128);
			strncpy(this->targettalk, base.targettalk, 128);
			this->freshdemon = base.freshdemon;
			strncpy(this->deathrefresh, base.deathrefresh, 128);
			this->relive = base.relive;
			this->modelrange = base.modelrange;
		}
		void reset()
		{
			this->id = 0;
			this->name[0] = '\0';
			this->level = 0;
			this->monstertype = 0;
			this->visterange = 0;
			this->skills[0] = '\0';
			this->npcai = 0;
			this->maxhp = 0;
			this->exp = 0;
			this->lookrange = 0;
			this->mvspd = 0;
			this->rushspd = 0;
			this->attspd = 0;
			this->blocktype = 0;
			this->pdef = 0;
			this->mdef = 0;
			this->pdam = 0;
			this->mdam = 0;
			this->bdam = 0;
			this->hdam = 0;
			this->wdam = 0;
			this->ldam = 0;
			this->bdef = 0;
			this->hdef = 0;
			this->wdef = 0;
			this->ldef = 0;
			this->visit = 0;
			this->attack = 0;
			this->outputmode = 0;
			this->phit = 0;
			this->mhit = 0;
			this->force = 0;
			this->hide = 0;
			this->ignore = 0;
			this->type = 0;
			this->bonetime = 0;
			this->randtalk[0] = '\0';
			this->atttalk[0] = '\0';
			this->deadtalk[0] = '\0';
			this->targettalk[0] = '\0';
			this->freshdemon = 0;
			this->deathrefresh[0] = '\0';
			this->relive = 0;
			this->modelrange = 0;
		}
	};
	typedef zDataBM<zNpcDataBaseEntry, NpcDataBase> NpcDataBaseManager;
}
#endif

